// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hiro/hiro.proto

package hiro

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QRCodeRequest_ErrorCorrectionLevel int32

const (
	QRCodeRequest_L QRCodeRequest_ErrorCorrectionLevel = 0
	QRCodeRequest_M QRCodeRequest_ErrorCorrectionLevel = 1
	QRCodeRequest_Q QRCodeRequest_ErrorCorrectionLevel = 2
	QRCodeRequest_H QRCodeRequest_ErrorCorrectionLevel = 3
)

var QRCodeRequest_ErrorCorrectionLevel_name = map[int32]string{
	0: "L",
	1: "M",
	2: "Q",
	3: "H",
}

var QRCodeRequest_ErrorCorrectionLevel_value = map[string]int32{
	"L": 0,
	"M": 1,
	"Q": 2,
	"H": 3,
}

func (x QRCodeRequest_ErrorCorrectionLevel) String() string {
	return proto.EnumName(QRCodeRequest_ErrorCorrectionLevel_name, int32(x))
}

func (QRCodeRequest_ErrorCorrectionLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_299bb9dc780a3734, []int{0, 0}
}

type QRCodeRequest_Encoding int32

const (
	QRCodeRequest_AUTO          QRCodeRequest_Encoding = 0
	QRCodeRequest_NUMERIC       QRCodeRequest_Encoding = 1
	QRCodeRequest_ALPHA_NUMERIC QRCodeRequest_Encoding = 2
	QRCodeRequest_UNICODE       QRCodeRequest_Encoding = 3
)

var QRCodeRequest_Encoding_name = map[int32]string{
	0: "AUTO",
	1: "NUMERIC",
	2: "ALPHA_NUMERIC",
	3: "UNICODE",
}

var QRCodeRequest_Encoding_value = map[string]int32{
	"AUTO":          0,
	"NUMERIC":       1,
	"ALPHA_NUMERIC": 2,
	"UNICODE":       3,
}

func (x QRCodeRequest_Encoding) String() string {
	return proto.EnumName(QRCodeRequest_Encoding_name, int32(x))
}

func (QRCodeRequest_Encoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_299bb9dc780a3734, []int{0, 1}
}

type QRCodeRequest struct {
	Content              string                             `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ErrorCorrection      QRCodeRequest_ErrorCorrectionLevel `protobuf:"varint,2,opt,name=error_correction,json=errorCorrection,proto3,enum=QRCodeRequest_ErrorCorrectionLevel" json:"error_correction,omitempty"`
	Mode                 QRCodeRequest_Encoding             `protobuf:"varint,3,opt,name=mode,proto3,enum=QRCodeRequest_Encoding" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *QRCodeRequest) Reset()         { *m = QRCodeRequest{} }
func (m *QRCodeRequest) String() string { return proto.CompactTextString(m) }
func (*QRCodeRequest) ProtoMessage()    {}
func (*QRCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bb9dc780a3734, []int{0}
}

func (m *QRCodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCodeRequest.Unmarshal(m, b)
}
func (m *QRCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCodeRequest.Marshal(b, m, deterministic)
}
func (m *QRCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeRequest.Merge(m, src)
}
func (m *QRCodeRequest) XXX_Size() int {
	return xxx_messageInfo_QRCodeRequest.Size(m)
}
func (m *QRCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeRequest proto.InternalMessageInfo

func (m *QRCodeRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *QRCodeRequest) GetErrorCorrection() QRCodeRequest_ErrorCorrectionLevel {
	if m != nil {
		return m.ErrorCorrection
	}
	return QRCodeRequest_L
}

func (m *QRCodeRequest) GetMode() QRCodeRequest_Encoding {
	if m != nil {
		return m.Mode
	}
	return QRCodeRequest_AUTO
}

type QRCodeResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QRCodeResponse) Reset()         { *m = QRCodeResponse{} }
func (m *QRCodeResponse) String() string { return proto.CompactTextString(m) }
func (*QRCodeResponse) ProtoMessage()    {}
func (*QRCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bb9dc780a3734, []int{1}
}

func (m *QRCodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCodeResponse.Unmarshal(m, b)
}
func (m *QRCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCodeResponse.Marshal(b, m, deterministic)
}
func (m *QRCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeResponse.Merge(m, src)
}
func (m *QRCodeResponse) XXX_Size() int {
	return xxx_messageInfo_QRCodeResponse.Size(m)
}
func (m *QRCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeResponse proto.InternalMessageInfo

func (m *QRCodeResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("QRCodeRequest_ErrorCorrectionLevel", QRCodeRequest_ErrorCorrectionLevel_name, QRCodeRequest_ErrorCorrectionLevel_value)
	proto.RegisterEnum("QRCodeRequest_Encoding", QRCodeRequest_Encoding_name, QRCodeRequest_Encoding_value)
	proto.RegisterType((*QRCodeRequest)(nil), "QRCodeRequest")
	proto.RegisterType((*QRCodeResponse)(nil), "QRCodeResponse")
}

func init() { proto.RegisterFile("hiro/hiro.proto", fileDescriptor_299bb9dc780a3734) }

var fileDescriptor_299bb9dc780a3734 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x51, 0x4b, 0xfb, 0x30,
	0x14, 0xc5, 0x97, 0x76, 0xff, 0x6d, 0xff, 0x2b, 0xdb, 0x62, 0x10, 0x2c, 0x3e, 0x8d, 0xf8, 0x32,
	0x18, 0x54, 0xd8, 0x3e, 0x41, 0xa9, 0x83, 0x0e, 0xba, 0xce, 0x05, 0xfb, 0x3c, 0xb4, 0xbd, 0x68,
	0x61, 0xe6, 0xce, 0x34, 0xf3, 0xdb, 0xf8, 0x5d, 0x25, 0xc5, 0x0a, 0x15, 0x5f, 0x72, 0x92, 0x93,
	0xc3, 0x8f, 0x7b, 0x0f, 0x4c, 0x5f, 0x2b, 0x43, 0x77, 0xee, 0x08, 0x4f, 0x86, 0x2c, 0xc9, 0x4f,
	0x0f, 0xc6, 0x7b, 0x15, 0x53, 0x89, 0x0a, 0xdf, 0xcf, 0x58, 0x5b, 0x11, 0xc0, 0xb0, 0x20, 0x6d,
	0x51, 0xdb, 0x80, 0xcd, 0xd8, 0xfc, 0xbf, 0x6a, 0x9f, 0x22, 0x03, 0x8e, 0xc6, 0x90, 0x39, 0x14,
	0x64, 0x0c, 0x16, 0xb6, 0x22, 0x1d, 0x78, 0x33, 0x36, 0x9f, 0x2c, 0x6f, 0xc3, 0x0e, 0x23, 0x5c,
	0xbb, 0x58, 0xfc, 0x93, 0x4a, 0xf1, 0x03, 0x8f, 0x6a, 0x8a, 0x5d, 0x57, 0x2c, 0xa0, 0xff, 0x46,
	0x25, 0x06, 0x7e, 0xc3, 0xb8, 0xfe, 0xcd, 0xd0, 0x05, 0x95, 0x95, 0x7e, 0x51, 0x4d, 0x48, 0x2e,
	0xe1, 0xea, 0x2f, 0xaa, 0xf8, 0x07, 0x2c, 0xe5, 0x3d, 0x27, 0x5b, 0xce, 0x9c, 0xec, 0xb9, 0xe7,
	0x24, 0xe1, 0xbe, 0x8c, 0x60, 0xd4, 0x52, 0xc4, 0x08, 0xfa, 0x51, 0xfe, 0xb8, 0xe3, 0x3d, 0x71,
	0x01, 0xc3, 0x2c, 0xdf, 0xae, 0xd5, 0x26, 0xe6, 0x4c, 0x5c, 0xc2, 0x38, 0x4a, 0x1f, 0x92, 0xe8,
	0xd0, 0x5a, 0x9e, 0xfb, 0xcf, 0xb3, 0x4d, 0xbc, 0xbb, 0x5f, 0x73, 0x5f, 0x4a, 0x98, 0xb4, 0x63,
	0xd5, 0x27, 0xd2, 0x35, 0x0a, 0x0e, 0xfe, 0xd9, 0x1c, 0xbf, 0xbb, 0x71, 0xd7, 0xe5, 0x0a, 0xfa,
	0x49, 0x65, 0x48, 0x2c, 0x60, 0x10, 0x1b, 0x7c, 0xb2, 0x28, 0x26, 0xdd, 0x5d, 0x6e, 0xa6, 0x61,
	0x17, 0x22, 0x7b, 0xcf, 0x83, 0xa6, 0xff, 0xd5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x5a,
	0x2e, 0x83, 0x92, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HiroClient is the client API for Hiro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HiroClient interface {
	Create(ctx context.Context, in *QRCodeRequest, opts ...grpc.CallOption) (*QRCodeResponse, error)
}

type hiroClient struct {
	cc *grpc.ClientConn
}

func NewHiroClient(cc *grpc.ClientConn) HiroClient {
	return &hiroClient{cc}
}

func (c *hiroClient) Create(ctx context.Context, in *QRCodeRequest, opts ...grpc.CallOption) (*QRCodeResponse, error) {
	out := new(QRCodeResponse)
	err := c.cc.Invoke(ctx, "/Hiro/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiroServer is the server API for Hiro service.
type HiroServer interface {
	Create(context.Context, *QRCodeRequest) (*QRCodeResponse, error)
}

// UnimplementedHiroServer can be embedded to have forward compatible implementations.
type UnimplementedHiroServer struct {
}

func (*UnimplementedHiroServer) Create(ctx context.Context, req *QRCodeRequest) (*QRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

func RegisterHiroServer(s *grpc.Server, srv HiroServer) {
	s.RegisterService(&_Hiro_serviceDesc, srv)
}

func _Hiro_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiroServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hiro/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiroServer).Create(ctx, req.(*QRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hiro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hiro",
	HandlerType: (*HiroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Hiro_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hiro/hiro.proto",
}
