// Code generated by go-bindata.
// sources:
// templates/data/home_banner
// templates/data/html/meta.html
// templates/data/info
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _home_banner = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x4e\xc4\x30\x0c\x45\xd7\xc9\x29\xfe\x12\x24\xd4\x03\xb0\x03\x06\x89\x35\x8c\x60\x1d\x52\x0f\xb1\xd4\xd6\xc5\x49\x41\x43\x94\xbb\xa3\x34\x01\xcd\xf2\xe9\xd9\xfe\xfe\xc0\x1b\x4d\x5e\x66\x42\x12\x04\x56\xb1\x16\x38\x06\xc2\x0f\xa9\x20\x9c\x57\xba\x41\xe0\x8f\x80\x95\xf4\x24\x3a\xbb\xc5\x13\x3e\xd5\xcb\x48\x88\xa4\x5f\xec\x69\xb0\xc6\x58\xe0\x6e\x4b\x41\x14\xb8\x45\xce\x43\x83\x52\x70\x95\xf3\xf0\x38\x3b\x9e\x4a\xb9\xb6\x35\xec\x3d\x72\xa2\x36\xd4\xa1\x14\x0b\x1c\xc4\x47\x98\xbe\x5d\xe1\x52\xbe\xc8\xa6\x9e\xba\x7c\xa6\x55\x22\x27\xd1\xf3\xee\x8e\xdf\x9c\x12\x69\x73\x1d\x76\x71\xbf\xf1\x34\x82\x97\x93\x58\xf3\x4a\x1a\x59\x16\xa0\xdf\xe8\x5c\x8a\x35\x6d\x6c\x74\x7f\x4f\xed\x7c\x70\x7b\xb2\x79\x90\x79\xe6\x84\xff\xbd\xc6\xd5\xd4\xc6\xb5\x3f\x29\x62\x72\x9a\x68\x44\xbd\x9f\xf3\xf0\x24\x31\x95\x02\x5e\xf6\x26\x9b\xba\xd4\x92\x80\xdf\x00\x00\x00\xff\xff\x4b\xcf\xff\x7f\x6c\x01\x00\x00")

func home_bannerBytes() ([]byte, error) {
	return bindataRead(
		_home_banner,
		"home_banner",
	)
}

func home_banner() (*asset, error) {
	bytes, err := home_bannerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home_banner", size: 364, mode: os.FileMode(420), modTime: time.Unix(1564230775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlMetaHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0a\x02\x31\x14\x84\xe1\xde\x53\x0c\xcb\xd6\xb1\x17\xd7\x0b\x78\x8a\x60\x06\xb1\xd8\x17\x48\x5e\xa1\x0c\xef\xee\xf2\x48\xf5\x33\x7c\x23\xed\x27\xbd\xde\x0e\x94\x6c\x84\x34\xaa\xbd\x89\xd9\x87\xb3\x3d\xf9\x9b\xd8\x97\x5c\xee\x59\x58\x3d\x79\x6c\x52\x89\xd8\xf0\xea\xe6\x34\xcf\xfd\xb1\xc6\xef\xfa\xa2\x20\xf1\xfa\x80\x44\x6b\x11\xff\x00\x00\x00\xff\xff\x81\x50\x47\x46\x66\x00\x00\x00")

func htmlMetaHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlMetaHtml,
		"html/meta.html",
	)
}

func htmlMetaHtml() (*asset, error) {
	bytes, err := htmlMetaHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/meta.html", size: 102, mode: os.FileMode(420), modTime: time.Unix(1564313326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _info = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\x50\x50\x50\xb0\x52\xa8\xae\xd6\x83\xf2\x6b\x6b\xb9\x14\x14\x9c\x4a\x33\x73\x52\x14\x5c\x12\x4b\x52\x21\x72\x60\x3e\x88\x0b\x96\x75\xce\xcf\xcd\xcd\x2c\x51\x80\xeb\x84\xf0\xc1\x52\xee\xf9\x0a\x49\x60\xbd\x99\x79\x69\xf9\x56\x5c\x20\x25\xfe\xc1\x48\x66\x78\xe6\xa5\xe5\xeb\xb9\xfb\xfb\x07\x83\x55\x2b\x28\x38\x06\x39\x7b\x60\x4a\x83\x44\xa1\x0a\xc2\x5c\x83\x82\x3d\xfd\xfd\x30\xd5\x40\x25\x6a\x6b\x01\x01\x00\x00\xff\xff\xfa\x09\x79\x55\xca\x00\x00\x00")

func infoBytes() ([]byte, error) {
	return bindataRead(
		_info,
		"info",
	)
}

func info() (*asset, error) {
	bytes, err := infoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info", size: 202, mode: os.FileMode(420), modTime: time.Unix(1564218083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"home_banner": home_banner,
	"html/meta.html": htmlMetaHtml,
	"info": info,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"home_banner": &bintree{home_banner, map[string]*bintree{}},
	"html": &bintree{nil, map[string]*bintree{
		"meta.html": &bintree{htmlMetaHtml, map[string]*bintree{}},
	}},
	"info": &bintree{info, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

